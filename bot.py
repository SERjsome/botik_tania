import os
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, MessageHandler, filters, CommandHandler, CallbackQueryHandler, ContextTypes
from datetime import datetime, timedelta

requests = {}
shifts = ["–ù–æ—á—å", "–£—Ç—Ä–æ", "–î–µ–Ω—å"]
valid_names = ["–í–∏–æ–ª–µ—Ç—Ç–∞", "–ù–µ—Å—Ç–∏", "–ú–∞—Ä–∏", "–õ–∏–ª–∞"]
name_regex = re.compile(r'^(?:' + '|'.join(valid_names) + r')$')
date_regex = re.compile(r'^\d{2}\.\d{2}$')

def show_main_keyboard():
    keyboard = [[KeyboardButton("üìÖ –ú–æ–∏ –≤—ã—Ö–æ–¥–Ω—ã–µ"), KeyboardButton("üìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤—ã—Ö–æ–¥–Ω—ã–µ")]]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# --- –ì–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def request_off_day(update: Update, context):
    try:
        user = update.message.from_user
        request = update.message.text.strip().split("\n")

        if update.message.text == "üìÖ –ú–æ–∏ –≤—ã—Ö–æ–¥–Ω—ã–µ":
            await show_user_days(update, context)
            return
        if update.message.text == "üìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤—ã—Ö–æ–¥–Ω—ã–µ":
            await show_available_days(update, context, 0)
            return

        if len(request) != 3:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n1. –ò–º—è –∞–Ω–∫–µ—Ç—ã\n2. –î–∞—Ç–∞\n3. –°–º–µ–Ω–∞",
                                            reply_markup=show_main_keyboard())
            return

        name = request[0].strip().split(". ")[1]
        date = request[1].strip().split(". ")[1]
        shift = request[2].strip().split(". ")[1]

        if not name_regex.match(name):
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–∞—è –∞–Ω–∫–µ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –í–∏–æ–ª–µ—Ç—Ç–∞, –ù–µ—Å—Ç–∏, –ú–∞—Ä–∏, –õ–∏–ª–∞.",
                                            reply_markup=show_main_keyboard())
            return

        if not date_regex.match(date):
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–î–µ–Ω—å.–ú–µ—Å—è—Ü', –Ω–∞–ø—Ä–∏–º–µ—Ä, 01.05.",
                                            reply_markup=show_main_keyboard())
            return

        if shift not in shifts:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–∞—è —Å–º–µ–Ω–∞. –£–∫–∞–∂–∏—Ç–µ: –ù–æ—á—å, –£—Ç—Ä–æ, –î–µ–Ω—å.",
                                            reply_markup=show_main_keyboard())
            return

        date = datetime.strptime(date, "%d.%m").strftime("%d.%m")

        if date not in requests:
            requests[date] = {}

        if name in requests[date]:
            await update.message.reply_text(f"–î–ª—è {name} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤—ã—Ö–æ–¥–Ω–æ–π –Ω–∞ {date}.",
                                            reply_markup=show_main_keyboard())
            return

        if shift in [v['shift'] for v in requests.get(date, {}).values()]:
            await update.message.reply_text(f"–ù–∞ {date} —Å–º–µ–Ω–∞ {shift} —É–∂–µ –∑–∞–Ω—è—Ç–∞.",
                                            reply_markup=show_main_keyboard())
            return

        requests[date][name] = {'shift': shift, 'user_id': user.id}
        username = f"@{user.username}" if user.username else f"{user.first_name}"
        await update.message.reply_text(f"–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç: {name}, {date}, {shift} ‚Äî {username}",
                                        reply_markup=show_main_keyboard())

        available = [s for s in shifts if s not in [v['shift'] for v in requests.get(date, {}).values()]]
        if not available:
            await update.message.reply_text(f"–ù–∞ {date} –≤—Å–µ —Å–º–µ–Ω—ã –∑–∞–Ω—è—Ç—ã.",
                                            reply_markup=show_main_keyboard())
        else:
            await update.message.reply_text(f"–ù–∞ {date} –¥–æ—Å—Ç—É–ø–Ω—ã: {', '.join(available)}",
                                            reply_markup=show_main_keyboard())
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ request_off_day: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.",
                                        reply_markup=show_main_keyboard())

# --- –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤—ã—Ö–æ–¥–Ω—ã–µ —Å –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
async def show_available_days(update: Update, context: ContextTypes.DEFAULT_TYPE, offset=0):
    today = datetime.now()
    available_days = []
    for i in range(offset, offset + 7):
        date = today + timedelta(days=i)
        date_str = date.strftime("%d.%m")
        if date_str not in requests:
            requests[date_str] = {}

        if len(requests[date_str]) < len(shifts):
            available = [s for s in shifts if s not in [v['shift'] for v in requests[date_str].values()]]
            available_days.append(f"{date_str} ‚Äî {', '.join(available)}")

    text = "\n".join(available_days) if available_days else "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–º–µ–Ω –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."

    buttons = []
    if offset >= 7:
        buttons.append(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page:{offset - 7}"))
    if offset + 7 < 60:
        buttons.append(InlineKeyboardButton("‚ñ∂Ô∏è –î–∞–ª–µ–µ", callback_data=f"page:{offset + 7}"))

    await update.message.reply_text(
        text,
        reply_markup=InlineKeyboardMarkup([buttons]) if buttons else show_main_keyboard()
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
async def handle_page_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    offset = int(query.data.split(":")[1])
    today = datetime.now()
    available_days = []
    for i in range(offset, offset + 7):
        date = today + timedelta(days=i)
        date_str = date.strftime("%d.%m")
        if date_str not in requests:
            requests[date_str] = {}
        if len(requests[date_str]) < len(shifts):
            available = [s for s in shifts if s not in [v['shift'] for v in requests[date_str].values()]]
            available_days.append(f"{date_str} ‚Äî {', '.join(available)}")

    text = "\n".join(available_days) if available_days else "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–º–µ–Ω –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."

    buttons = []
    if offset >= 7:
        buttons.append(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page:{offset - 7}"))
    if offset + 7 < 60:
        buttons.append(InlineKeyboardButton("‚ñ∂Ô∏è –î–∞–ª–µ–µ", callback_data=f"page:{offset + 7}"))

    await query.edit_message_text(
        text=text,
        reply_markup=InlineKeyboardMarkup([buttons]) if buttons else None
    )

# --- –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã—Ö–æ–¥–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
async def show_user_days(update: Update, context):
    user = update.message.from_user
    name = None
    today = datetime.now()

    for day, records in list(requests.items()):
        for n, record in records.items():
            if record['user_id'] == user.id:
                name = n
                break
        if name:
            break

    if not name:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö.",
                                        reply_markup=show_main_keyboard())
        return

    days = []
    for date_str in list(requests.keys()):
        try:
            date_obj = datetime.strptime(date_str, "%d.%m").replace(year=today.year)
            if date_obj < today:
                if name in requests[date_str]:
                    del requests[date_str][name]
                if not requests[date_str]:
                    del requests[date_str]
                continue
            if name in requests[date_str]:
                shift = requests[date_str][name]['shift']
                button = InlineKeyboardButton(f"‚ùå {date_str} ({shift})", callback_data=f"cancel:{name}:{date_str}")
                days.append([button])
        except ValueError:
            continue

    if not days:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö.",
                                        reply_markup=show_main_keyboard())
    else:
        await update.message.reply_text("–í–∞—à–∏ –≤—ã—Ö–æ–¥–Ω—ã–µ:", reply_markup=InlineKeyboardMarkup(days))

async def cancel_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    try:
        _, name, date = query.data.split(":")
        user_id = query.from_user.id

        if date in requests and name in requests[date] and requests[date][name]['user_id'] == user_id:
            del requests[date][name]
            if not requests[date]:
                del requests[date]
            await query.edit_message_text(f"–í—ã—Ö–æ–¥–Ω–æ–π {name} –Ω–∞ {date} –æ—Ç–º–µ–Ω—ë–Ω.")
        else:
            await query.edit_message_text("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —á—É–∂–æ–π –≤—ã—Ö–æ–¥–Ω–æ–π –∏–ª–∏ –≤—ã—Ö–æ–¥–Ω–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ cancel_day: {e}")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ.")

async def clear_data(update: Update, context):
    try:
        admin_user_ids = [8062513822]
        if update.message.from_user.id not in admin_user_ids:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return

        global requests
        requests = {}
        await update.message.reply_text("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞.",
                                        reply_markup=show_main_keyboard())
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ clear_data: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ.")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –≤—ã—Ö–æ–¥–Ω—ã–º–∏. –û—Ç–ø—Ä–∞–≤—å –∑–∞–ø—Ä–æ—Å:\n1. –ò–º—è –∞–Ω–∫–µ—Ç—ã\n2. –î–∞—Ç–∞ (–¥–¥.–º–º)\n3. –°–º–µ–Ω–∞ (–ù–æ—á—å/–£—Ç—Ä–æ/–î–µ–Ω—å)",
        reply_markup=show_main_keyboard()
    )

def main():
    try:
        BOT_TOKEN = "8028021620:AAFUf3q77NT9Xq0_LQbkzrzGajTXR4f3vXg"
        application = Application.builder().token(BOT_TOKEN).build()

        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("clear", clear_data))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, request_off_day))
        application.add_handler(CallbackQueryHandler(cancel_day, pattern=r"^cancel:"))
        application.add_handler(CallbackQueryHandler(handle_page_callback, pattern=r"^page:"))

        application.run_polling()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ main(): {e}")

if __name__ == '__main__':
    main()

import os
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, MessageHandler, filters, CommandHandler, CallbackQueryHandler, ContextTypes
from datetime import datetime, timedelta

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—ã—Ö–æ–¥–Ω–æ–π (–∞–Ω–∞–ª–æ–≥ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)
requests = {}

# –°–ø–∏—Å–æ–∫ —Å–º–µ–Ω
shifts = ["–ù–æ—á—å", "–£—Ç—Ä–æ", "–î–µ–Ω—å"]

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω–∫–µ—Ç—ã
valid_names = ["–í–∏–æ–ª–µ—Ç—Ç–∞", "–ù–µ—Å—Ç–∏", "–ú–∞—Ä–∏", "–õ–∏–ª–∞"]  # –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–Ω–∫–µ—Ç
name_regex = re.compile(r'^(?:' + '|'.join(valid_names) + r')$')

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ 00.00
date_regex = re.compile(r'^\d{2}\.\d{2}$')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ "üìÖ –ú–æ–∏ –≤—ã—Ö–æ–¥–Ω—ã–µ" –∏ "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤—ã—Ö–æ–¥–Ω—ã–µ"
def show_main_keyboard():
    keyboard = [
        [KeyboardButton("üìÖ –ú–æ–∏ –≤—ã—Ö–æ–¥–Ω—ã–µ"), KeyboardButton("üìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤—ã—Ö–æ–¥–Ω—ã–µ")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã—Ö–æ–¥–Ω–æ–π
async def request_off_day(update: Update, context):
    try:
        user = update.message.from_user
        request = update.message.text.strip().split("\n")

        if update.message.text == "üìÖ –ú–æ–∏ –≤—ã—Ö–æ–¥–Ω—ã–µ":
            await show_user_days(update, context)
            return
        
        if update.message.text == "üìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤—ã—Ö–æ–¥–Ω—ã–µ":
            await show_available_days(update, context)
            return

        print(f"Received message: {update.message.text}")

        if len(request) != 3:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n1. –ò–º—è –∞–Ω–∫–µ—Ç—ã\n2. –î–∞—Ç–∞\n3. –°–º–µ–Ω–∞",
                                            reply_markup=show_main_keyboard())
            return

        name = request[0].strip().split(". ")[1]
        date = request[1].strip().split(". ")[1]
        shift = request[2].strip().split(". ")[1]

        if not name_regex.match(name):
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–∞—è –∞–Ω–∫–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö: –í–∏–æ–ª–µ—Ç—Ç–∞, –ù–µ—Å—Ç–∏, –ú–∞—Ä–∏, –õ–∏–ª–∞.",
                                            reply_markup=show_main_keyboard())
            return

        if not date_regex.match(date):
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: '–î–µ–Ω—å.–ú–µ—Å—è—Ü' (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.05).",
                                            reply_markup=show_main_keyboard())
            return

        if shift not in shifts:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–∞—è —Å–º–µ–Ω–∞. –£–∫–∞–∂–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö: –ù–æ—á—å, –£—Ç—Ä–æ, –î–µ–Ω—å.",
                                            reply_markup=show_main_keyboard())
            return

        date = datetime.strptime(date, "%d.%m").strftime("%d.%m")

        if date not in requests:
            requests[date] = {}

        if name in requests[date]:
            await update.message.reply_text(f"–ù–∞ {date} –¥–ª—è –∞–Ω–∫–µ—Ç—ã {name} —É–∂–µ –±—ã–ª –ø—Ä–∏–Ω—è—Ç –≤—ã—Ö–æ–¥–Ω–æ–π. –ù–µ –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–π –≤—ã—Ö–æ–¥–Ω–æ–π –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å.",
                                            reply_markup=show_main_keyboard())
            return

        if shift in [v['shift'] for v in requests.get(date, {}).values()]:
            await update.message.reply_text(f"–ù–∞ {date} —Å–º–µ–Ω–∞ {shift} —É–∂–µ –∑–∞–Ω—è—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Å–º–µ–Ω—É.",
                                            reply_markup=show_main_keyboard())
            return

        requests[date][name] = {'shift': shift, 'user_id': user.id}
        await update.message.reply_text(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã—Ö–æ–¥–Ω–æ–π –ø—Ä–∏–Ω—è—Ç: {name}, {date}, {shift}", reply_markup=show_main_keyboard())

        available_shifts = [s for s in shifts if s not in [v['shift'] for v in requests.get(date, {}).values()]]
        if not available_shifts:
            await update.message.reply_text(f"–ù–∞ {date} –≤—Å–µ —Å–º–µ–Ω—ã –∑–∞–Ω—è—Ç—ã.", reply_markup=show_main_keyboard())
        else:
            await update.message.reply_text(f"–ù–∞ {date} –¥–æ—Å—Ç—É–ø–Ω—ã: {', '.join(available_shifts)}",
                                            reply_markup=show_main_keyboard())
    except Exception as e:
        print(f"Error occurred in request_off_day: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.", reply_markup=show_main_keyboard())

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã—Ö–æ–¥–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def show_user_days(update: Update, context):
    user = update.message.from_user
    name = None
    for day, records in requests.items():
        for n, record in records.items():
            if record['user_id'] == user.id:
                name = n
                break
    if not name:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö.", reply_markup=show_main_keyboard())
        return

    days = []
    for date, users in requests.items():
        if name in users:
            shift = users[name]['shift']
            button = InlineKeyboardButton(f"‚ùå {date} ({shift})", callback_data=f"cancel:{name}:{date}")
            days.append([button])

    if not days:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö.", reply_markup=show_main_keyboard())
        return

    await update.message.reply_text("–í–∞—à–∏ –≤—ã—Ö–æ–¥–Ω—ã–µ:", reply_markup=InlineKeyboardMarkup(days))

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö –Ω–∞ –Ω–µ–¥–µ–ª—é –≤–ø–µ—Ä—ë–¥
async def show_available_days(update: Update, context):
    today = datetime.now()
    available_days = []
    for i in range(7):
        date = today + timedelta(days=i)
        date_str = date.strftime("%d.%m")
        if date_str not in requests:
            requests[date_str] = {}

        if len(requests[date_str]) < len(shifts):
            available_shifts = [shift for shift in shifts if shift not in [v['shift'] for v in requests[date_str].values()]]
            available_days.append(f"–ù–∞ {date_str} –¥–æ—Å—Ç—É–ø–Ω—ã: {', '.join(available_shifts)}")

    if not available_days:
        await update.message.reply_text("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö.", reply_markup=show_main_keyboard())
    else:
        await update.message.reply_text("\n".join(available_days), reply_markup=show_main_keyboard())

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã –≤—ã—Ö–æ–¥–Ω–æ–≥–æ
async def cancel_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    try:
        _, name, date = query.data.split(":")
        user_id = update.callback_query.from_user.id

        if date in requests and name in requests[date] and requests[date][name]['user_id'] == user_id:
            del requests[date][name]
            if not requests[date]:
                del requests[date]
            await query.edit_message_text(f"–í—ã—Ö–æ–¥–Ω–æ–π {name} –Ω–∞ {date} –æ—Ç–º–µ–Ω—ë–Ω.")
        else:
            await query.edit_message_text("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≤—ã—Ö–æ–¥–Ω–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        print(f"Error in cancel_day: {e}")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ.")

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def clear_data(update: Update, context):
    try:
        admin_user_ids = [8062513822]
        user_id = update.message.from_user.id

        if user_id not in admin_user_ids:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
            return

        global requests
        requests = {}
        await update.message.reply_text("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞.", reply_markup=show_main_keyboard())
    except Exception as e:
        print(f"Error occurred in clear_data: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –≤—ã—Ö–æ–¥–Ω—ã–º–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∑–∞–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n1. –ò–º—è –∞–Ω–∫–µ—Ç—ã\n2. –î–∞—Ç–∞\n3. –°–º–µ–Ω–∞ (–ù–æ—á—å, –£—Ç—Ä–æ, –î–µ–Ω—å)",
        reply_markup=show_main_keyboard()
    )

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
def main():
    try:
        BOT_TOKEN = "8028021620:AAFUf3q77NT9Xq0_LQbkzrzGajTXR4f3vXg"
        application = Application.builder().token(BOT_TOKEN).build()

        application.add_handler(CommandHandler("start", start))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, request_off_day))
        application.add_handler(CommandHandler("clear", clear_data))
        application.add_handler(CallbackQueryHandler(cancel_day))

        application.run_polling()
    except Exception as e:
        print(f"Error occurred in main function: {e}")

if __name__ == '__main__':
    main()
